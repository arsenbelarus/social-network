{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Header/Header.module.css","Redux/messageReducer.ts","Assets/Images/loader.gif","Components/Profile/MyPosts/Post/Post.module.css","Components/Navbar/Navbar.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Common/FormControls/FormControls.tsx","serviceWorker.ts","Components/Navbar/Navbar.tsx","Components/Music/Music.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","API/api.ts","Redux/usersReducer.ts","Components/Common/Paginator/Paginator.tsx","Components/Users/Users.tsx","Components/Common/Preloader/Preloader.tsx","Redux/user-selector.ts","Components/Users/UsersContainer.tsx","Components/Profile/ProfileInfo/ProfileStatusWtihHooks.tsx","Components/Profile/ProfileInfo/ProfileData.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/profileReducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/AddPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","Redux/friendsReducer.ts","Redux/authReducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Redux/appReducer.ts","Components/Friends/Friends.tsx","Components/Friends/FriendsContainer.tsx","App.tsx","Redux/reduxStore.ts","index.tsx","Utils/Validation/validators.ts","Components/Common/FormControls/FormControls.module.css","Assets/Images/avatar.jpg","Components/Users/Users.module.css","HOC/withAuthRedirect.tsx","Components/Friends/Friends.module.css","Components/Common/Paginator/Paginator.module.css"],"names":["module","exports","addMessageActionCreator","newMessageBody","type","initialState","dialogsData","id","name","messagesDataLeft","message","messagesDataRight","newMessageText","messageReducer","state","action","newMessage","Textarea","input","meta","props","hasError","touched","error","className","s","formControl","Input","Boolean","window","location","hostname","match","Navbar","nav","item","to","activeClassName","activeLink","Music","News","Settings","axiosInstance","axios","create","withCredentials","baseURL","headers","axiosFireBase","userApi","currentPage","pageSize","get","then","response","data","userId","post","delete","console","log","profileApi","getProfile","friends","getStatus","updateStatus","status","put","updateProfileData","profile","savePhoto","photo","formData","FormData","append","loginApi","securityApi","postApi","serverID","users","totalUsersCount","isFetching","isFollowStatusChanging","setUsers","toggleIsFetching","toggleFollowStatusChanging","usersReducer","map","u","followed","totalUsersQuantity","filter","Paginator","pagesNumber","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","onClick","p","index","key","selectedPage","style","cursor","onPaginationClickHandler","Users","userContainer","imageAndButtonContainer","src","photos","small","avatarLogo","usersPhoto","button","disabled","some","unFollow","follow","userInformation","Preloader","width","margin","loader","height","getUsersSelector","createSelector","usersPage","getPageSizeSelector","getTotalUsersCountSelector","getCurrentPageSelector","getIsFetchingSelector","getIsFollowStatusChangingSelector","UsersContainer","pageNumber","getUsers","this","toggleIsFollowStatusChanging","React","Component","compose","connect","dispatch","resultCode","followSuccess","setCurrentPage","items","totalCount","unFollowSuccess","ProfileStatusWithHooks","editMode","setEditMode","setStatus","useEffect","description","onDoubleClick","isOwner","TextField","variant","value","onChange","e","currentTarget","onBlur","update","autoFocus","ProfileData","activateEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","ProfileDataReduxForm","reduxForm","form","onSubmit","handleSubmit","formSummaryError","Field","component","placeholder","validate","requiredField","ProfileInfo","large","alt","target","files","length","initialValues","postsData","setUserStatus","setUpdatedProfileData","getPosts","a","posts","profileReducer","Post","memo","avatar","likesCount","deletePost","AddPostForm","AddPostReduxForm","onSubmitSuccess","result","reset","MyPosts","postElements","useCallback","reverse","values","random","addNewPost","sendNewPost","main","MyPostsContainer","params","withAuthRedirect","withRouter","profilePage","Profile","ProfileContainer","authorisedId","history","getUserProfile","getUserStatus","goToProfile","prevProps","prevState","content","updateUserStatus","auth","isAuth","file","messages","toLowerCase","stopSubmit","Promise","reject","Header","header","loginBlock","login","logout","setFriends","getFriends","friendsReducer","email","captchaUrl","setUserData","payload","getCaptchaUrlSuccess","checkAuth","getCaptcha","url","authReducer","HeaderContainer","maxLength10","maxLength","maxLength50","LoginReduxForm","display","password","rememberMe","captcha","formErrorMessage","_error","initialised","appReducer","Friends","friendsElements","f","friend","friendName","FriendsContainer","friendsPage","DialogsContainer","lazy","App","initialiseApp","exact","path","render","Suspense","fallback","gridArea","backgroundColor","app","checkAuthResult","all","reducers","combineReducers","messagesPage","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","mapStateToPropsForRedirect","RedirectComponent"],"mappings":"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","file":"static/js/main.fd1731c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"MyPosts_main__PN3Os\",\"posts\":\"MyPosts_posts__1PK4X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__l2oe9\",\"loginBlock\":\"Header_loginBlock__Zic5-\"};","import {messagesPageType} from \"./Types\";\r\n\r\nconst addMessage = \"ADD-MESSAGE\";\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string) => {return {type: addMessage, newMessageBody}}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: \"Arsen\"},\r\n        {id: 2, name: \"Olya\"},\r\n        {id: 3, name: \"Tigran\"},\r\n        {id: 4, name: \"David\"},\r\n    ],\r\n    messagesDataLeft: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Hello world\"},\r\n        {id: 4, message: \"Lorem ipsum\"},\r\n    ],\r\n    messagesDataRight: [\r\n        {id: 1, message: \"I love my wife\"},\r\n        {id: 2, message: \"fg gfdgsdfg g fd\"},\r\n        {id: 3, message: \"fg dfgdf dfg \"},\r\n        {id: 4, message: \" fd sgdf dfg df \"},\r\n    ],\r\n    newMessageText: \"\",\r\n}\r\n\r\nconst messageReducer = (state: messagesPageType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case addMessage:\r\n            let newMessage = {id: 5, message: action.newMessageBody,}\r\n            return {\r\n                ...state,\r\n                messagesDataLeft: [...state.messagesDataLeft, newMessage],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default messageReducer;\r\n","module.exports = __webpack_public_path__ + \"static/media/loader.181849d9.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3YEHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__7zjwi\",\"item\":\"Navbar_item__2dKJe\",\"activeLink\":\"Navbar_activeLink__3dRIm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1tfyt\",\"formSummaryError\":\"ProfileInfo_formSummaryError__1aAT3\"};","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\n\r\ntype propsType = {}\r\n\r\n// @ts-ignore\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError &&  <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError &&  <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype propsType = {\r\n\r\n}\r\nfunction Navbar(props: propsType) {\r\n    return (\r\n        <div className={s.nav}>\r\n            <nav>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/profile\"} activeClassName={s.activeLink}> Profile </NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/dialogs\"} activeClassName={s.activeLink}> Messages</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/users\"} activeClassName={s.activeLink}> Users</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/news\"} activeClassName={s.activeLink}> News</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/music\"} activeClassName={s.activeLink}> Music</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/settings\"} activeClassName={s.activeLink}> Settings</NavLink>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\n\r\nfunction Settings() {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import axios from \"axios\";\r\nimport {postsDataType, postType, profileType} from \"../Redux/Types\";\r\n\r\nconst axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"a318ecb3-f5df-4512-99ed-aabe354d9b6f\"\r\n    },\r\n})\r\n\r\nconst axiosFireBase = axios.create({\r\n    baseURL: \"https://social-network-1f63a.firebaseio.com/\",\r\n    headers: {\r\n        \"Content-Type\": \"text/plain\",\r\n        \"API-KEY\": \"AIzaSyCllyQV9B_bsPepLBxHZCFa85p5cLfJbs4\",\r\n    },\r\n})\r\n\r\nexport const userApi = {\r\n    getUsers (currentPage: number = 1, pageSize: number = 100) {\r\n        return axiosInstance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    checkAuth () {\r\n        return axiosInstance.get('auth/me')\r\n            .then(response => response.data)\r\n    },\r\n    follow (userId: number) {\r\n        return axiosInstance.post(`follow/${userId}`, {})\r\n            .then(response => response.data)\r\n    },\r\n    unFollow (userId: number) {\r\n        return axiosInstance.delete(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getProfile (userId: number) {\r\n        console.log(\"Obsolete method. Please use profileApi\")\r\n        return profileApi.getProfile(userId)\r\n    },\r\n    getFriends (friends: boolean, pageSize: number = 100) {\r\n        return axiosInstance.get(`users?friend=${friends}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile (userId: number) {\r\n        return axiosInstance.get(`profile/${userId}`)\r\n    },\r\n    getStatus (userId: number) {\r\n        return axiosInstance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status: string) {\r\n        return axiosInstance.put(\"profile/status\", {status: status})\r\n    },\r\n    updateProfileData (profile: profileType) {\r\n        return axiosInstance.put(\"profile\", profile)\r\n    },\r\n    savePhoto (photo: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photo)\r\n        return axiosInstance.put(\"profile/photo\", formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const loginApi = {\r\n    signIn(data: { password: string | number; captcha: string | null; rememberMe: boolean; email: string }) {\r\n        return axiosInstance.post(\"auth/login\", data)\r\n    },\r\n    signOut () {\r\n        return axiosInstance.delete(\"auth/login\")\r\n    }\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptchaUrl () {\r\n        return axiosInstance.get(\"security/get-captcha-url\")\r\n    }\r\n}\r\n\r\nexport const postApi = {\r\n    sendPost (data: postType) {\r\n        return axiosFireBase.post(\"posts.json\", data)\r\n    },\r\n    getPosts () {\r\n        return axiosFireBase.get(\"posts.json\")\r\n    },\r\n    deletePost (serverID: string) {\r\n        return axiosFireBase.delete(`posts/${serverID}.json`)\r\n    }\r\n}\r\n\r\n\r\n","import {usersPageType, usersType} from \"./Types\";\r\nimport {userApi} from \"../API/api\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_QUANTITY = \"SET_TOTAL_USERS_QUANTITY\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_FOLLOW_STATUS_CHANGING = \"TOGGLE_FOLLOW_STATUS_CHANGING\";\r\n\r\nlet initialState: usersPageType = {\r\n    users: [],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowStatusChanging: [],\r\n}\r\n\r\n\r\nconst usersReducer = (state: usersPageType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n\r\n        case SET_TOTAL_USERS_QUANTITY:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersQuantity,\r\n            }\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        case TOGGLE_FOLLOW_STATUS_CHANGING:\r\n            return {\r\n                ...state,\r\n                isFollowStatusChanging: action.isFollowStatusChanging\r\n                    ? [...state.isFollowStatusChanging, action.userId]\r\n                    : state.isFollowStatusChanging.filter(id => id !== action.userId),\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// Action creators\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId});\r\nexport const unFollowSuccess = (userId: number) => ({type: UNFOLLOW, userId});\r\nexport const setUsers = (users: usersType[]) => ({type: SET_USERS, users});\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setTotalUsersQuantity = (totalUsersQuantity: number) => ({\r\n    type: SET_TOTAL_USERS_QUANTITY,\r\n    totalUsersQuantity\r\n});\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nexport const toggleFollowStatusChanging = (isFollowStatusChanging: boolean, userId: number) =>\r\n    ({type: TOGGLE_FOLLOW_STATUS_CHANGING, isFollowStatusChanging, userId});\r\n\r\n\r\n// Thunk creators\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setUsers([]));\r\n        dispatch(setCurrentPage(currentPage));\r\n        userApi.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersQuantity(data.totalCount));\r\n        });\r\n    }\r\n}\r\nexport const unFollow = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch (toggleFollowStatusChanging(true, userId))\r\n        userApi.unFollow(userId).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch (unFollowSuccess(userId))\r\n            }\r\n            dispatch (toggleFollowStatusChanging(false, userId))\r\n        });\r\n    }\r\n}\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch (toggleFollowStatusChanging(true, userId))\r\n        userApi.follow(userId).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch (followSuccess(userId))\r\n            }\r\n            dispatch (toggleFollowStatusChanging(false, userId))\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\ntype paginatorPropsType = {\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPaginationClickHandler: (p: number) => void,\r\n}\r\n\r\nconst Paginator = (props: paginatorPropsType) => {\r\n    let pagesNumber = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesNumber; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionSize = 10;\r\n    let portionCount = Math.ceil(pagesNumber/portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n            <div className={s.pagination}>\r\n                {portionNumber > 1 &&\r\n                <button onClick={() => {setPortionNumber(portionNumber - 1)}}> Previous </button>}\r\n\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p, index) =>\r\n                    <span key={index} className={(props.currentPage === p) ? s.selectedPage : \"\"}\r\n                          style={{cursor: \"pointer\"}}\r\n                          onClick={() => {\r\n                              props.onPaginationClickHandler(p)\r\n                          }}> {p} </span>\r\n                )}\r\n                {portionCount > portionNumber &&\r\n                <button onClick={() => {setPortionNumber(portionNumber + 1)}}> Next </button>}\r\n            </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Paginator","import React from \"react\"\r\nimport s from \"./Users.module.css\"\r\nimport {usersType} from \"../../Redux/Types\";\r\nimport avatarLogo from \"../../Assets/Images/avatar.jpg\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../Common/Paginator/Paginator\";\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    users: Array<usersType>;\r\n    unFollow: (id: number) => void;\r\n    follow: (id: number) => void;\r\n    onPaginationClickHandler: (p: number) => void;\r\n    isFollowStatusChanging: Array<number>;\r\n    toggleIsFollowStatusChanging: (isFollowStatusChanging: boolean, userId: number) => void\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator totalUsersCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                       currentPage={props.currentPage} onPaginationClickHandler={props.onPaginationClickHandler}/>\r\n            {\r\n                props.users.map((u: usersType) =>\r\n                    <div key={u.id} className={s.userContainer}>\r\n                        <div className={s.imageAndButtonContainer}>\r\n                            <div>\r\n                                <NavLink to={\"/profile/\" + u.id}>\r\n                                    <img src={u.photos.small ? u.photos.small : avatarLogo} className={s.usersPhoto}/>\r\n                                </NavLink>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                {u.followed\r\n                                    ? <button disabled={props.isFollowStatusChanging.some(id => id === u.id)} onClick={() => props.unFollow(u.id)}>UnFollow</button>\r\n                                    : <button disabled={props.isFollowStatusChanging.some(id => id === u.id)} onClick={() => props.follow(u.id)}>Follow</button>}\r\n                            </div>\r\n                        </div>\r\n                        <span className={s.userInformation}>\r\n                            <span>\r\n                                <div>{u.name}</div>\r\n                                <div>{u.status}</div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React from \"react\";\r\nimport loader from \"../../../Assets/Images/loader.gif\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div style={{width: \"100px\", margin: \"0 auto\"}}>\r\n            <img src={loader} style={{width: \"100px\", height: \"60px\"}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import {_stateType} from \"./Types\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersPrimitiveSelector = (state: _stateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsersPrimitiveSelector, (users) => {return users.filter(u => true)})\r\n\r\n\r\nexport const getPageSizeSelector = (state: _stateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCountSelector = (state: _stateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPageSelector = (state: _stateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetchingSelector = (state: _stateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getIsFollowStatusChangingSelector = (state: _stateType) => {\r\n    return state.usersPage.isFollowStatusChanging\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    toggleFollowStatusChanging,\r\n    unFollow,\r\n} from \"../../Redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPageSelector, getIsFetchingSelector, getIsFollowStatusChangingSelector,\r\n    getPageSizeSelector,\r\n    getTotalUsersCountSelector,\r\n    getUsersSelector\r\n} from \"../../Redux/user-selector\";\r\n\r\n\r\nclass UsersContainer extends React.Component<any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPaginationClickHandler = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n                   isFollowStatusChanging = {this.props.isFollowStatusChanging}\r\n                   toggleIsFollowStatusChanging = {this.props.toggleIsFollowStatusChanging}\r\n                   onPaginationClickHandler={this.onPaginationClickHandler}\r\n                   users={this.props.users}/>\r\n        </>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        totalUsersCount: getTotalUsersCountSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching: getIsFetchingSelector(state),\r\n        isFollowStatusChanging: getIsFollowStatusChangingSelector(state),\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect (mapStateToProps, {follow,\r\n        toggleFollowStatusChanging, getUsers, unFollow})\r\n)(UsersContainer)\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {profileType} from \"../../../Redux/Types\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype propsType = {\r\n    profile: profileType,\r\n    status: string,\r\n    update: (status: string) => void,\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: propsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        if(props.isOwner) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.update(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <div className={s.description}>\r\n                <span onDoubleClick={activateEditMode}><strong>Status: </strong>{props.status}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div className={s.description}>\r\n                <TextField variant={\"outlined\"} type=\"text\" value={status}\r\n                           onChange={onStatusChange} onBlur={activateViewMode} autoFocus={true} />\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {profileType} from \"../../../Redux/Types\";\r\n\r\ntype ProfileDataTypes = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataTypes) => {\r\n    return (\r\n        <div>\r\n\r\n            {\r\n                props.isOwner &&\r\n                <div>\r\n                    <button onClick={props.activateEditMode}> <strong> Edit Profile </strong> </button>\r\n                </div>\r\n            }\r\n\r\n            <div className={s.description}>\r\n                <strong> Full name: </strong> {props.profile.fullName}\r\n            </div>\r\n            <div className={s.description}>\r\n                <strong> About me: </strong> {props.profile.aboutMe}\r\n            </div>\r\n            <div className={s.description}>\r\n                <strong> Looking for a job: </strong> {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n            <div className={s.description}>\r\n                <strong> Professional background: </strong> {props.profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div className={s.description}>\r\n                <strong> Contacts: </strong> {Object.keys(props.profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <strong>{key}: </strong> {props.profile.contacts[key]}\r\n                </div>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {profileType} from \"../../../Redux/Types\";\r\nimport {Input, Textarea} from \"../../Common/FormControls/FormControls\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {requiredField} from \"../../../Utils/Validation/validators\";\r\n\r\ntype ProfileDataFormTypes = {\r\n    handleSubmit: any;\r\n    error: string;\r\n    profile: profileType;\r\n}\r\n\r\nconst ProfileDataForm = (props: ProfileDataFormTypes) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button> Save changes</button>\r\n                {props.error && <div className={s.formSummaryError}>\r\n                    {props.error}\r\n                </div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <p>Full name</p>\r\n                <Field type={\"text\"} name={\"fullName\"} component={Input} placeholder={\"Full name\"}\r\n                       validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <p>Looking for a job</p>\r\n                <Field type={\"checkbox\"} name={\"lookingForAJob\"} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <p>My professional skills</p>\r\n                <Field type={\"textarea\"} name={\"lookingForAJobDescription\"} component={Textarea}\r\n                       validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <p>About me</p>\r\n                <Field type={\"textarea\"} name={\"aboutMe\"} component={Textarea}\r\n                       validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <p>Contacts</p>\r\n                {Object.keys(props.profile.contacts).map(key => {\r\n                    return (\r\n                        <div>\r\n                            <strong> {key}: </strong> <Field type={\"text\"} name={\"contacts.\"+key} component={Input}/>\r\n                        </div>\r\n                        )\r\n                }) }\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<any, any>({\r\n    form: 'profileData'\r\n})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {profileType} from \"../../../Redux/Types\";\r\nimport avatarLogo from \"../../../Assets/Images/avatar.jpg\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWtihHooks\";\r\nimport ProfileData from \"./ProfileData\";\r\nimport {ProfileDataReduxForm} from \"./ProfileDataForm\";\r\n\r\n\r\ntype propsType = {\r\n    profile: profileType,\r\n    status: string,\r\n    update: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (e: File) => void,\r\n    updateProfileData: (profile: profileType) => Promise<any>,\r\n}\r\n\r\nconst ProfileInfo: React.FC<propsType> = ({profile, status, update, isOwner, savePhoto, updateProfileData}) => {\r\n\r\n    const photoUploadHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (formData: profileType) => {\r\n        updateProfileData(formData).then(\r\n            () => setEditMode(false)\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {profile &&\r\n            <div>\r\n                <div className={s.description}>\r\n                    <img src={profile.photos.large || avatarLogo} alt=\"large avatar\"/>\r\n                    {isOwner && <input type={\"file\"} onChange={photoUploadHandler}/>}\r\n                </div>\r\n                {\r\n                    editMode\r\n                        ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit}\r\n                                                profile={profile}/>\r\n                        : <ProfileData isOwner={isOwner}\r\n                                       profile={profile}\r\n                                       activateEditMode={() => setEditMode(true)}/>\r\n                }\r\n                <ProfileStatusWithHooks profile={profile} status={status}\r\n                                        update={update} isOwner={isOwner}/>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import {photosType, postsDataType, postType, profilePageType, profileType} from \"./Types\";\r\nimport {postApi, profileApi, userApi} from \"../API/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst addPost = \"ADD-POST\";\r\nconst SET_USERS_PROFILE = \"SET_USERS_PROFILE\";\r\nconst SET_USER_STATUS = \"SET_USER_STATUS\";\r\nconst SET_USER_PHOTO = \"SET_USER_PHOTO\";\r\nconst SET_UPDATED_PROFILE_STATUS = \"SET_UPDATED_PROFILE_STATUS\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst SET_POSTS = \"SET_POSTS\";\r\n\r\n\r\nlet initialState = {\r\n    profile: null,\r\n    status: \"\",\r\n    postsData: [],\r\n}\r\n\r\nconst profileReducer = (state: profilePageType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_POSTS:\r\n            return {\r\n                ...state,\r\n                postsData: action.posts,\r\n            }\r\n        case SET_USERS_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_USER_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_USER_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        case SET_UPDATED_PROFILE_STATUS:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    fullName: action.profile.fullName,\r\n                    lookingForAJobDescription: action.profile.lookingForAJobDescription,\r\n                    lookingForAJob: action.profile.lookingForAJob,\r\n                    aboutMe: action.profile.aboutMe,\r\n                    contacts: {\r\n                        ...action.profile.contacts\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setPosts = (posts: postsDataType) => ({type: SET_POSTS, posts})\r\nconst setUsersProfile = (profile: profileType) => ({type: SET_USERS_PROFILE, profile})\r\nconst setUserStatus = (status: string) => ({type: SET_USER_STATUS, status})\r\nconst setUserPhoto = (photos: photosType) => ({type: SET_USER_PHOTO, photos})\r\nconst setUpdatedProfileData = (profile: profileType) => ({type: SET_UPDATED_PROFILE_STATUS, profile})\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        userApi.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUsersProfile(response.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        profileApi.getStatus(userId).then(response => {\r\n            dispatch(setUserStatus(response.data))\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => {\r\n    return (dispatch: any) => {\r\n        profileApi.updateStatus(status).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserStatus(status))\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File) => {\r\n    return (dispatch: any) => {\r\n        profileApi.savePhoto(file)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserPhoto(response.data.data.photos))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateProfileData = (profile: profileType) => async (dispatch: any) => {\r\n    const response = await profileApi.updateProfileData(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUpdatedProfileData(profile))\r\n    } else {\r\n        let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n        dispatch(stopSubmit(\"profileData\", {contacts: {[key]: response.data.messages[0]}}))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport const getPosts = () => async (dispatch: any) => {\r\n    const response = await postApi.getPosts()\r\n    if (response.status === 200) {\r\n        response.data = Object.keys(response.data).map(key => {\r\n            return [response.data[key], key]})\r\n        dispatch(setPosts(response.data))\r\n    }\r\n}\r\n\r\nexport const sendNewPost = (post: postType) => async (dispatch: any) => {\r\n    const response = await postApi.sendPost(post)\r\n    if (response.status === 200) {\r\n        dispatch(getPosts())\r\n    }\r\n}\r\n\r\nexport const deletePost = (serverID: string) => async (dispatch: any) => {\r\n    const response = await postApi.deletePost(serverID)\r\n    if (response.status === 200) {\r\n        dispatch(getPosts())\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype propsType = {\r\n    message: string,\r\n    likesCount: number,\r\n    deletePost: (postId: string) => void,\r\n    serverID: string,\r\n    avatar: string,\r\n};\r\n\r\nconst Post = React.memo((props: propsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={props.avatar ? props.avatar : \"https://greendestinations.org/wp-content/uploads/2019/05/avatar-exemple.jpg\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount}  likes</span>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => props.deletePost(props.serverID)}> Delete post </button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Post","import React from 'react';\r\nimport {Field, reduxForm, reset, SubmitHandler} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormControls/FormControls\";\r\n\r\ntype propsType = {\r\n    handleSubmit: SubmitHandler;\r\n}\r\n\r\nconst AddPostForm = React.memo((props: propsType) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Textarea} name={\"addNewPost\"}\r\n                           placeholder={\"Add your post here\"}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n        </form>\r\n    )\r\n})\r\n\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('AddPost'));\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm({\r\n    form: 'AddPost',\r\n    onSubmitSuccess: afterSubmit,\r\n})(AddPostForm)","import React, {useCallback} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {AddPostReduxForm} from \"./AddPostForm\";\r\nimport {postType} from \"../../../Redux/Types\";\r\n\r\ntype propsType = {\r\n    posts: [postType, string],\r\n    sendNewPost: (post: postType) => void,\r\n    deletePost: (serverID: string) => void,\r\n    avatar: string,\r\n    isOwner: boolean,\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: propsType) => {\r\n    let postElements;\r\n    const deletePost = useCallback((serverID: string) => {\r\n        props.deletePost(serverID)\r\n    }, [props])\r\n    if (props.posts !== null) {\r\n        if (props.isOwner) {\r\n            if (props.isOwner) {\r\n                postElements = props.posts.map((p: any) => {\r\n                    return <Post key={p[0].id}\r\n                                 message={p[0].message}\r\n                                 likesCount={p[0].likesCount}\r\n                                 serverID={p[1]}\r\n                                 deletePost={deletePost}\r\n                                 avatar={props.avatar}\r\n                    />\r\n                }).reverse()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const onSubmit = useCallback((values: any) => {\r\n        const post = {id: Math.random(), message: values.addNewPost, likesCount: 0}\r\n        props.sendNewPost(post)\r\n    }, [])\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <h3> My posts </h3>\r\n            <AddPostReduxForm onSubmit={onSubmit}/>\r\n            <div className={s.posts}>  {postElements}  </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {deletePost, getPosts, sendNewPost} from \"../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {_stateType} from \"../../../Redux/Types\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../../HOC/withAuthRedirect\";\r\n\r\n\r\nclass MyPostsContainer extends React.Component<any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getPosts()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MyPosts posts={this.props.posts}\r\n                         sendNewPost={this.props.sendNewPost}\r\n                         deletePost={this.props.deletePost}\r\n                         avatar={this.props.avatar}\r\n                         isOwner={!this.props.match.params.userId}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => {\r\n    return {\r\n        posts: state.profilePage.postsData,\r\n        avatar: state.profilePage.profile?.photos.small\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {sendNewPost, getPosts, deletePost}))(MyPostsContainer)","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../Redux/Types\";\r\n\r\ntype propsType = {\r\n    profile: profileType,\r\n    status: string,\r\n    update: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (e: File) => void,\r\n    updateProfileData: (profile: profileType) => Promise<any>,\r\n}\r\n\r\nfunction Profile(props: propsType) {\r\n\r\n    return (\r\n        <div >\r\n            <ProfileInfo profile={props.profile} status={props.status} update={props.update}\r\n                         isOwner={props.isOwner} savePhoto={props.savePhoto} updateProfileData={props.updateProfileData}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {_stateType, profileType} from \"../../Redux/Types\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    savePhoto,\r\n    updateProfileData,\r\n    updateUserStatus\r\n} from \"../../Redux/profileReducer\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<any> {\r\n\r\n    goToProfile () {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorisedId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.goToProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.goToProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className={s.content}>\r\n            <Profile profile={this.props.profile} status={this.props.status}\r\n                     update={this.props.updateUserStatus} isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto} updateProfileData={this.props.updateProfileData}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect (mapStateToProps,\r\n        {getUserProfile, getUserStatus, updateUserStatus, savePhoto, updateProfileData}),\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype headerPropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n    logout: () => void\r\n}\r\n\r\nfunction Header (props: headerPropsType) {\r\n    return (\r\n        <header className={s.header}>\r\n        <img src={\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQie3E0fOUC7Wzjg0m3zZMX44h4RqWOSJqM1cfgO0t2CeE2pmhc&usqp=CAU\"}/>\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div> { props.login } --- <button onClick={props.logout}> Log out </button> </div>\r\n                : <NavLink to={\"/login\"}>Login</NavLink>}\r\n\r\n        </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import {friendsPageType, friendsType} from \"./Types\";\r\nimport {userApi} from \"../API/api\";\r\n\r\nconst SET_FRIENDS = \"SET_FRIENDS\";\r\n\r\nlet initialState: friendsPageType = {\r\n    friends: [],\r\n}\r\n\r\nconst friendsReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"SET_FRIENDS\":\r\n            return {\r\n                ...state,\r\n                friends: action.friends\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Action creators\r\nexport const setFriends = (friends: friendsType[]) => ({type: SET_FRIENDS, friends});\r\n\r\n// Thunk creators\r\nexport const getFriends = () => {\r\n    return (dispatch: any) => {\r\n        userApi.getFriends(true).then(data => {\r\n            dispatch(setFriends(data.items));\r\n        });\r\n    }\r\n}\r\n\r\nexport default friendsReducer;","import {authType} from \"./Types\";\r\nimport {loginApi, securityApi, userApi} from \"../API/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getFriends, setFriends} from \"./friendsReducer\";\r\n\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\nconst CAPTCHA_URL_SUCCESS = \"CAPTCHA_URL_SUCCESS\";\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n}\r\n\r\nconst authReducer = (state: authType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n        case CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: SET_USER_DATA, payload: {id, email, login, isAuth}})\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) =>\r\n    ({type: CAPTCHA_URL_SUCCESS, payload: {captchaUrl}})\r\n\r\nexport const checkAuth = () => {\r\n    return (dispatch: any) => {\r\n        return userApi.checkAuth()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let {id, login, email} = data.data\r\n                    dispatch(setUserData(id, email, login, true))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string | number, rememberMe: boolean, captcha: string | null = null) => {\r\n    return (dispatch: any) => {\r\n        loginApi.signIn({email, password, rememberMe, captcha})\r\n            .then(data => {\r\n                if (data.data.resultCode === 0) {\r\n                    dispatch(checkAuth())\r\n                    dispatch(getFriends())\r\n                } else {\r\n                    if (data.data.resultCode === 10) {\r\n                        dispatch (getCaptcha())\r\n                    }\r\n                    let formErrorMessage = data.data.messages.length > 0 ? data.data.messages : \"Error occurred\";\r\n                    dispatch(stopSubmit(\"login\", {_error: `${formErrorMessage}`}))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return (dispatch: any) => {\r\n        loginApi.signOut()\r\n            .then(data => {\r\n                if (data.data.resultCode === 0) {\r\n                    dispatch(setUserData(null, null, null, false,))\r\n                    dispatch(setFriends([]))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getCaptcha = () => async (dispatch: any) => {\r\n    const response = await securityApi.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logout } from \"../../Redux/authReducer\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\n\r\nclass HeaderContainer extends React.Component<any, any> {\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout}/>;\r\n    }\r\n}\r\n\r\nconst mapsStateToProps = (state: _stateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapsStateToProps, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {Input} from \"../Common/FormControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../../Utils/Validation/validators\";\r\nimport s from \"../Common/FormControls/FormControls.module.css\"\r\n\r\ntype loginFormType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst maxLength10 = maxLength(10);\r\nconst maxLength50 = maxLength(50);\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<any, loginFormType> & loginFormType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field type={\"text\"} name={\"email\"} component={Input} placeholder={\"email\"}\r\n                       validate={[requiredField, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"password\"} name={\"password\"} component={Input} placeholder={\"password\"}\r\n                       validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div style={{display: \"inline-flex\"}}>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> <span>remember me</span>\r\n            </div>\r\n            {\r\n                captchaUrl &&\r\n                <div> <img src={captchaUrl} alt=\"Captcha\"/> </div>\r\n            }\r\n            {\r\n                captchaUrl &&\r\n                <div>\r\n                    <Field type={\"text\"} name={\"captcha\"} component={Input}\r\n                           placeholder={\"Type antibot symbols\"}\r\n                           validate={[requiredField]}/>\r\n                </div>\r\n            }\r\n            {\r\n                error &&\r\n            <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Sign in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<any, any>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)","import React from \"react\";\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptcha, login, logout} from \"../../Redux/authReducer\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype loginType = {\r\n    login: (email: string, password: string|number, rememberMe: boolean, captcha: string) => void,\r\n    isAuth: boolean,\r\n    captchaUrl: string,\r\n}\r\n\r\nconst Login = (props: loginType) => {\r\n    const onSubmit = (formData: { email: string, password: string|number, rememberMe: boolean, captcha: string}) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\n// @ts-ignore\r\nexport default connect(mapStateToProps, {login, logout, getCaptcha})(Login)","import {checkAuth} from \"./authReducer\";\r\nimport {appType} from \"./Types\";\r\n\r\n\r\nconst INITIALISED_SUCCESFULLY = \"INITIALISED_SUCCESFULLY\";\r\n\r\nlet initialState = {\r\n    initialised: false\r\n}\r\n\r\nconst appReducer = (state: appType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case INITIALISED_SUCCESFULLY:\r\n            return {\r\n                ...state,\r\n                initialised: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initialisedSuccessfully = () => ({type: INITIALISED_SUCCESFULLY})\r\n\r\nexport const initialiseApp = () => (dispatch: any) => {\r\n    let checkAuthResult = dispatch(checkAuth())\r\n    Promise.all([checkAuthResult])\r\n        .then(() => {\r\n            dispatch(initialisedSuccessfully())\r\n        })\r\n}\r\n\r\nexport default appReducer;","import React from 'react';\r\nimport s from './Friends.module.css';\r\nimport {friendsType} from \"../../Redux/Types\";\r\nimport avatarLogo from \"../../Assets/Images/avatar.jpg\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype propsType = {\r\n    friends: friendsType[],\r\n}\r\n\r\nfunction Friends(props: propsType) {\r\n\r\n    let friendsElements = props.friends.map((f, index) =>\r\n        <div className={s.friend} key={index}>\r\n            <NavLink to={\"/profile/\" + f.id}>\r\n                <img src={f.photos.small ? f.photos.small : avatarLogo} alt={\"\"}/>\r\n            </NavLink>\r\n            <div className={s.friendName}>\r\n                {f.name}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h2>Friends</h2>\r\n\r\n            <div className={s.friends}>\r\n                {friendsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\nimport Friends from \"./Friends\";\r\nimport {getFriends} from \"../../Redux/friendsReducer\";\r\n\r\n\r\nclass FriendsContainer extends React.Component<any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getFriends()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Friends friends={this.props.friends}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => {\r\n    return {\r\n        friends: state.friendsPage.friends,\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, {getFriends})(React.memo(FriendsContainer))\r\n","import React from 'react';\nimport {Route, Switch, Redirect} from \"react-router-dom\";\nimport './App.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Music from \"./Components/Music/Music\";\nimport News from \"./Components/News/News\";\nimport Settings from \"./Components/Settings/Settings\";\nimport {_stateType} from './Redux/Types';\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport Login from \"./Components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {initialiseApp} from \"./Redux/appReducer\";\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\nimport FriendsContainer from \"./Components/Friends/FriendsContainer\";\nconst DialogsContainer = React.lazy(() => import(\"./Components/Dialogs/DialogsContainer\"))\n\n\nclass App extends React.Component<any, any> {\n    componentDidMount() {\n        this.props.initialiseApp()\n    }\n\n    render() {\n        if (!this.props.initialised) {\n            return <Preloader/>\n        }\n        return (\n\n            <div className={\"app-wrapper\"}>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className={\"app-wrapper-content\"}>\n                    <Switch>\n                        <Route exact path='/'\n                               render={() => <Redirect to={\"/profile\"}/>}/>\n                        <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                        <Route path='/dialogs' render={() => {\n                            return <React.Suspense fallback={<Preloader/>}>\n                                <DialogsContainer/>\n                            </React.Suspense>\n                        }}/>\n                        <Route path='/music' render={() => <Music/>}/>\n                        <Route path='/news' render={() => <News/>}/>\n                        <Route path='/settings' render={() => <Settings/>}/>\n                        <Route path='/users' render={() => <UsersContainer/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Route path='*' render={() => <div> 404 NOT FOUND</div> }/>\n\n                    </Switch>\n\n                </div>\n                <div style={{gridArea: \"r\", backgroundColor: \"black\"}}>\n                    <FriendsContainer/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state: _stateType) => ({\n    initialised: state.app.initialised\n})\n\nexport default connect(mapStateToProps, {initialiseApp})(App);","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport messageReducer from \"./messageReducer\";\r\nimport friendsReducer from \"./friendsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { reducer as formReducer } from \"redux-form\"\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messageReducer,\r\n    usersPage: usersReducer,\r\n    friendsPage: friendsReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nlet store: Store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./Redux/reduxStore\";\nimport {Provider} from 'react-redux';\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const requiredField = (value: string) => {\r\n    if(value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLength = (maxLength: number) => (value: string) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__ZYcM1\",\"error\":\"FormControls_error__3I2i7\",\"formSummaryError\":\"FormControls_formSummaryError__2CIQE\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.64830c49.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__2cLG_\",\"userContainer\":\"Users_userContainer__PLg5V\",\"imageAndButtonContainer\":\"Users_imageAndButtonContainer__3Yr9E\",\"button\":\"Users_button__2GMTj\",\"userInformation\":\"Users_userInformation__3W_DY\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {_stateType} from \"../Redux/Types\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state: _stateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if(!this.props.isAuth) {return <Redirect to={\"/login\"}/>};\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__22q5d\",\"friend\":\"Friends_friend__2--Sd\",\"friendName\":\"Friends_friendName__3AgSy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3QJY_\",\"pagination\":\"Paginator_pagination__1WvrG\"};"],"sourceRoot":""}