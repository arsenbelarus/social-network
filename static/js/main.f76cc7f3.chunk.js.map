{"version":3,"sources":["Components/Friends/Friends.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Common/Paginator/Paginator.module.css","Redux/messageReducer.ts","Assets/Images/loader.gif","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Navbar/Navbar.module.css","Components/Common/FormControls/FormControls.tsx","serviceWorker.ts","Components/Navbar/Navbar.tsx","Components/Header/Header.tsx","API/api.ts","Redux/friendsReducer.ts","Redux/authReducer.ts","Components/Header/HeaderContainer.tsx","Redux/appReducer.ts","Components/Common/Preloader/Preloader.tsx","Components/Friends/Friends.tsx","Components/Friends/FriendsContainer.tsx","Components/Profile/ProfileInfo/ProfileStatusWtihHooks.tsx","Components/Profile/ProfileInfo/ProfileData.tsx","Utils/Validation/validators.ts","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/profileReducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/AddPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Music/Music.tsx","Components/News/News.tsx","Components/Settings/Settings.tsx","Redux/usersReducer.ts","Components/Common/Paginator/Paginator.tsx","Components/Users/Users.tsx","Redux/user-selector.ts","Components/Users/UsersContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","MainBlock.tsx","App.tsx","Redux/reduxStore.ts","index.tsx","Components/Common/FormControls/FormControls.module.css","Assets/Images/avatar.jpg","Components/Users/Users.module.css","Components/Header/Header.module.css","HOC/withAuthRedirect.tsx","App.module.css"],"names":["module","exports","addMessageActionCreator","newMessageBody","type","initialState","dialogsData","id","name","messagesDataLeft","message","messagesDataRight","newMessageText","messageReducer","state","action","newMessage","MyTextarea","input","meta","props","hasError","touched","error","className","s","formControl","variant","multiline","MyInput","InputCheckbox","Boolean","window","location","hostname","match","Navbar","nav","item","to","activeClassName","activeLink","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","header","AppBar","Toolbar","IconButton","edge","color","aria-label","isAuth","loggedInUser","loggedInUserName","login","Button","onClick","logout","style","margin","textDecoration","axiosInstance","axios","create","withCredentials","baseURL","headers","axiosFireBase","userApi","currentPage","pageSize","get","then","response","data","userId","post","delete","console","log","profileApi","getProfile","friends","getStatus","updateStatus","status","put","updateProfileData","profile","savePhoto","photo","formData","FormData","append","loginApi","securityApi","postApi","serverID","setFriends","getFriends","dispatch","items","friendsReducer","email","captchaUrl","setUserData","payload","getCaptchaUrlSuccess","checkAuth","resultCode","getCaptcha","a","url","authReducer","HeaderContainer","this","React","Component","connect","auth","initialised","appReducer","Preloader","width","src","loader","height","Friends","friendsElements","map","f","index","friend","key","photos","small","avatarLogo","alt","friendName","FriendsContainer","gridArea","backgroundColor","friendsPage","memo","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","description","onDoubleClick","isOwner","TextField","value","onChange","e","currentTarget","onBlur","update","autoFocus","ProfileData","profileData","profileDataButton","activateEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","requiredField","maxLength","length","ProfileDataReduxForm","reduxForm","form","onSubmit","handleSubmit","formSummaryError","formControlItem","Field","component","placeholder","validate","ProfileInfo","profilePhotoAndData","profilePhoto","large","Input","target","files","initialValues","postsData","setUserStatus","setUpdatedProfileData","getPosts","posts","profileReducer","Post","avatar","likesCount","deletePost","AddPostForm","AddPostReduxForm","onSubmitSuccess","result","reset","MyPosts","postElements","useCallback","p","reverse","values","Math","random","addNewPost","sendNewPost","main","MyPostsContainer","params","compose","withAuthRedirect","withRouter","profilePage","Profile","ProfileContainer","authorisedId","history","push","getUserProfile","getUserStatus","goToProfile","prevProps","prevState","content","updateUserStatus","file","messages","toLowerCase","stopSubmit","Promise","reject","Music","News","Settings","users","totalUsersCount","isFetching","isFollowStatusChanging","setUsers","toggleIsFetching","toggleFollowStatusChanging","usersReducer","u","followed","totalUsersQuantity","filter","Paginator","pagesNumber","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","selectedPage","cursor","onPaginationClickHandler","Users","userContainer","imageAndButtonContainer","usersPhoto","button","disabled","some","unFollow","follow","userInformation","getUsersSelector","createSelector","usersPage","getPageSizeSelector","getTotalUsersCountSelector","getCurrentPageSelector","getIsFetchingSelector","getIsFollowStatusChangingSelector","UsersContainer","pageNumber","getUsers","toggleIsFollowStatusChanging","followSuccess","setCurrentPage","totalCount","unFollowSuccess","maxLength10","maxLength50","LoginReduxForm","display","password","rememberMe","captcha","formErrorMessage","_error","DialogsContainer","lazy","MainBlock","appWrapperContent","exact","path","render","Suspense","fallback","App","initialiseApp","appWrapper","app","checkAuthResult","all","reducers","combineReducers","messagesPage","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","mapStateToPropsForRedirect","RedirectComponent"],"mappings":"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","file":"static/js/main.f76cc7f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__22q5d\",\"friend\":\"Friends_friend__2--Sd\",\"friendName\":\"Friends_friendName__3AgSy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"MyPosts_main__PN3Os\",\"posts\":\"MyPosts_posts__1PK4X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3QJY_\",\"pagination\":\"Paginator_pagination__1WvrG\"};","import {messagesPageType} from \"./Types\";\r\n\r\nconst addMessage = \"ADD-MESSAGE\";\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string) => {return {type: addMessage, newMessageBody}}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: \"Arsen\"},\r\n        {id: 2, name: \"Olya\"},\r\n        {id: 3, name: \"Tigran\"},\r\n        {id: 4, name: \"David\"},\r\n    ],\r\n    messagesDataLeft: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Hello world\"},\r\n        {id: 4, message: \"Lorem ipsum\"},\r\n    ],\r\n    messagesDataRight: [\r\n        {id: 1, message: \"I love my wife\"},\r\n        {id: 2, message: \"fg gfdgsdfg g fd\"},\r\n        {id: 3, message: \"fg dfgdf dfg \"},\r\n        {id: 4, message: \" fd sgdf dfg df \"},\r\n    ],\r\n    newMessageText: \"\",\r\n}\r\n\r\nconst messageReducer = (state: messagesPageType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case addMessage:\r\n            let newMessage = {id: 5, message: action.newMessageBody,}\r\n            return {\r\n                ...state,\r\n                messagesDataLeft: [...state.messagesDataLeft, newMessage],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default messageReducer;\r\n","module.exports = __webpack_public_path__ + \"static/media/loader.181849d9.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3YEHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePhotoAndData\":\"ProfileInfo_profilePhotoAndData__3ymvG\",\"profilePhoto\":\"ProfileInfo_profilePhoto__2fqhY\",\"profileData\":\"ProfileInfo_profileData__2pUjb\",\"formControlItem\":\"ProfileInfo_formControlItem__2G1vd\",\"profileDataButton\":\"ProfileInfo_profileDataButton__28uRX\",\"status\":\"ProfileInfo_status__27pRF\",\"description\":\"ProfileInfo_description__1tfyt\",\"formSummaryError\":\"ProfileInfo_formSummaryError__1aAT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__7zjwi\",\"item\":\"Navbar_item__2dKJe\",\"activeLink\":\"Navbar_activeLink__3dRIm\"};","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\nimport {Input, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype propsType = {}\r\n\r\n// @ts-ignore\r\nexport const MyTextarea = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                <TextField variant={\"outlined\"} multiline {...input} {...props} />\r\n            </div>\r\n            {hasError &&  <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nexport const MyInput = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                <Input {...input} {...props} />\r\n            </div>\r\n            {hasError &&  <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nexport const InputCheckbox = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError &&  <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype propsType = {\r\n\r\n}\r\nfunction Navbar(props: propsType) {\r\n    return (\r\n\r\n            <nav className={s.nav}>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/profile\"} activeClassName={s.activeLink}> Profile </NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/dialogs\"} activeClassName={s.activeLink}> Messages</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/users\"} activeClassName={s.activeLink}> Users</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/news\"} activeClassName={s.activeLink}> News</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/music\"} activeClassName={s.activeLink}> Music</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={\"/settings\"} activeClassName={s.activeLink}> Settings</NavLink>\r\n                </div>\r\n            </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Header.module.css\"\r\nimport {AppBar, Typography, IconButton, Button, Toolbar, createStyles, Theme} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\ntype headerPropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n    logout: () => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nfunction Header(props: headerPropsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <AppBar variant={\"elevation\"}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    {props.isAuth\r\n                        ? <div className={s.loggedInUser}>\r\n                            <span className={s.loggedInUserName}> {props.login} </span>\r\n                            <Button color=\"inherit\" onClick={props.logout}> Log out </Button>\r\n                        </div>\r\n                        : <div className={s.loggedInUser}>\r\n                            <Button color=\"secondary\">\r\n                                <NavLink style={{margin: \"10px\", color: \"ivory\", textDecoration: \"none\"}} to={\"/login\"}> Login </NavLink>\r\n                            </Button>\r\n                        </div>}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import axios from \"axios\";\r\nimport {postsDataType, postType, profileType} from \"../Redux/Types\";\r\n\r\nconst axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"a318ecb3-f5df-4512-99ed-aabe354d9b6f\"\r\n    },\r\n})\r\n\r\nconst axiosFireBase = axios.create({\r\n    baseURL: \"https://social-network-1f63a.firebaseio.com/\",\r\n    headers: {\r\n        \"Content-Type\": \"text/plain\",\r\n        \"API-KEY\": \"AIzaSyCllyQV9B_bsPepLBxHZCFa85p5cLfJbs4\",\r\n    },\r\n})\r\n\r\nexport const userApi = {\r\n    getUsers (currentPage: number = 1, pageSize: number = 100) {\r\n        return axiosInstance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    checkAuth () {\r\n        return axiosInstance.get('auth/me')\r\n            .then(response => response.data)\r\n    },\r\n    follow (userId: number) {\r\n        return axiosInstance.post(`follow/${userId}`, {})\r\n            .then(response => response.data)\r\n    },\r\n    unFollow (userId: number) {\r\n        return axiosInstance.delete(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getProfile (userId: number) {\r\n        console.log(\"Obsolete method. Please use profileApi\")\r\n        return profileApi.getProfile(userId)\r\n    },\r\n    getFriends (friends: boolean, pageSize: number = 100) {\r\n        return axiosInstance.get(`users?friend=${friends}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile (userId: number) {\r\n        return axiosInstance.get(`profile/${userId}`)\r\n    },\r\n    getStatus (userId: number) {\r\n        return axiosInstance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status: string) {\r\n        return axiosInstance.put(\"profile/status\", {status: status})\r\n    },\r\n    updateProfileData (profile: profileType) {\r\n        return axiosInstance.put(\"profile\", profile)\r\n    },\r\n    savePhoto (photo: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photo)\r\n        return axiosInstance.put(\"profile/photo\", formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const loginApi = {\r\n    signIn(data: { password: string | number; captcha: string | null; rememberMe: boolean; email: string }) {\r\n        return axiosInstance.post(\"auth/login\", data)\r\n    },\r\n    signOut () {\r\n        return axiosInstance.delete(\"auth/login\")\r\n    }\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptchaUrl () {\r\n        return axiosInstance.get(\"security/get-captcha-url\")\r\n    }\r\n}\r\n\r\nexport const postApi = {\r\n    sendPost (data: postType) {\r\n        return axiosFireBase.post(\"posts.json\", data)\r\n    },\r\n    getPosts () {\r\n        return axiosFireBase.get(\"posts.json\")\r\n    },\r\n    deletePost (serverID: string) {\r\n        return axiosFireBase.delete(`posts/${serverID}.json`)\r\n    }\r\n}\r\n\r\n\r\n","import {friendsPageType, friendsType} from \"./Types\";\r\nimport {userApi} from \"../API/api\";\r\n\r\nconst SET_FRIENDS = \"SET_FRIENDS\";\r\n\r\nlet initialState: friendsPageType = {\r\n    friends: [],\r\n}\r\n\r\nconst friendsReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"SET_FRIENDS\":\r\n            return {\r\n                ...state,\r\n                friends: action.friends\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Action creators\r\nexport const setFriends = (friends: friendsType[]) => ({type: SET_FRIENDS, friends});\r\n\r\n// Thunk creators\r\nexport const getFriends = () => {\r\n    return (dispatch: any) => {\r\n        userApi.getFriends(true).then(data => {\r\n            dispatch(setFriends(data.items));\r\n        });\r\n    }\r\n}\r\n\r\nexport default friendsReducer;","import {authType} from \"./Types\";\r\nimport {loginApi, securityApi, userApi} from \"../API/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getFriends, setFriends} from \"./friendsReducer\";\r\n\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\nconst CAPTCHA_URL_SUCCESS = \"CAPTCHA_URL_SUCCESS\";\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n}\r\n\r\nconst authReducer = (state: authType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n        case CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: SET_USER_DATA, payload: {id, email, login, isAuth}})\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) =>\r\n    ({type: CAPTCHA_URL_SUCCESS, payload: {captchaUrl}})\r\n\r\nexport const checkAuth = () => {\r\n    return (dispatch: any) => {\r\n        return userApi.checkAuth()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let {id, login, email} = data.data\r\n                    dispatch(setUserData(id, email, login, true))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string | number, rememberMe: boolean, captcha: string | null = null) => {\r\n    return (dispatch: any) => {\r\n        loginApi.signIn({email, password, rememberMe, captcha})\r\n            .then(data => {\r\n                if (data.data.resultCode === 0) {\r\n                    dispatch(checkAuth())\r\n                    dispatch(getFriends())\r\n                } else {\r\n                    if (data.data.resultCode === 10) {\r\n                        dispatch (getCaptcha())\r\n                    }\r\n                    let formErrorMessage = data.data.messages.length > 0 ? data.data.messages : \"Error occurred\";\r\n                    dispatch(stopSubmit(\"login\", {_error: `${formErrorMessage}`}))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return (dispatch: any) => {\r\n        loginApi.signOut()\r\n            .then(data => {\r\n                if (data.data.resultCode === 0) {\r\n                    dispatch(setUserData(null, null, null, false,))\r\n                    dispatch(setFriends([]))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getCaptcha = () => async (dispatch: any) => {\r\n    const response = await securityApi.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logout } from \"../../Redux/authReducer\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\n\r\nclass HeaderContainer extends React.Component<any, any> {\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout}/>;\r\n    }\r\n}\r\n\r\nconst mapsStateToProps = (state: _stateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapsStateToProps, {logout})(HeaderContainer)","import {checkAuth} from \"./authReducer\";\r\nimport {appType} from \"./Types\";\r\n\r\n\r\nconst INITIALISED_SUCCESFULLY = \"INITIALISED_SUCCESFULLY\";\r\n\r\nlet initialState = {\r\n    initialised: false\r\n}\r\n\r\nconst appReducer = (state: appType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case INITIALISED_SUCCESFULLY:\r\n            return {\r\n                ...state,\r\n                initialised: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initialisedSuccessfully = () => ({type: INITIALISED_SUCCESFULLY})\r\n\r\nexport const initialiseApp = () => (dispatch: any) => {\r\n    let checkAuthResult = dispatch(checkAuth())\r\n    Promise.all([checkAuthResult])\r\n        .then(() => {\r\n            dispatch(initialisedSuccessfully())\r\n        })\r\n}\r\n\r\nexport default appReducer;","import React from \"react\";\r\nimport loader from \"../../../Assets/Images/loader.gif\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div style={{width: \"100px\", margin: \"0 auto\"}}>\r\n            <img src={loader} style={{width: \"100px\", height: \"60px\"}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import React from 'react';\r\nimport s from './Friends.module.css';\r\nimport {friendsType} from \"../../Redux/Types\";\r\nimport avatarLogo from \"../../Assets/Images/avatar.jpg\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype propsType = {\r\n    friends: friendsType[],\r\n}\r\n\r\nfunction Friends(props: propsType) {\r\n\r\n    let friendsElements = props.friends.map((f, index) =>\r\n        <div className={s.friend} key={index}>\r\n            <NavLink to={\"/profile/\" + f.id}>\r\n                <img src={f.photos.small ? f.photos.small : avatarLogo} alt={\"\"}/>\r\n            </NavLink>\r\n            <div className={s.friendName}>\r\n                {f.name}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h2>Friends</h2>\r\n\r\n            <div className={s.friends}>\r\n                {friendsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\nimport Friends from \"./Friends\";\r\nimport {getFriends} from \"../../Redux/friendsReducer\";\r\n\r\n\r\nclass FriendsContainer extends React.Component<any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getFriends()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{gridArea: \"r\", backgroundColor: \"black\"}}>\r\n                <Friends friends={this.props.friends}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => {\r\n    return {\r\n        friends: state.friendsPage.friends,\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, {getFriends})(React.memo(FriendsContainer))\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {profileType} from \"../../../Redux/Types\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype propsType = {\r\n    profile: profileType,\r\n    status: string,\r\n    update: (status: string) => void,\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: propsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        if(props.isOwner) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.update(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n            <div className={s.description}>\r\n                <span onDoubleClick={activateEditMode}><strong>Status: </strong>{props.status}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div className={s.description}>\r\n                <TextField variant={\"outlined\"} type=\"text\" value={status}\r\n                           onChange={onStatusChange} onBlur={activateViewMode} autoFocus={true} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {profileType} from \"../../../Redux/Types\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype ProfileDataTypes = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataTypes) => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            {\r\n                props.isOwner &&\r\n                <div className={s.profileDataButton}>\r\n                    <Button variant={\"outlined\"} onClick={props.activateEditMode}> <strong> Edit Profile </strong> </Button>\r\n                </div>\r\n            }\r\n\r\n            <div className={s.description}>\r\n                <strong> Full name: </strong> {props.profile.fullName}\r\n            </div>\r\n            <div className={s.description}>\r\n                <strong> About me: </strong> {props.profile.aboutMe}\r\n            </div>\r\n            <div className={s.description}>\r\n                <strong> Looking for a job: </strong> {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n            <div className={s.description}>\r\n                <strong> Professional background: </strong> {props.profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div className={s.description}>\r\n                <strong> Contacts: </strong> {Object.keys(props.profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <strong>{key}: </strong> {props.profile.contacts[key]}\r\n                </div>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData","export const requiredField = (value: string) => {\r\n    if(value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLength = (maxLength: number) => (value: string) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {profileType} from \"../../../Redux/Types\";\r\nimport {InputCheckbox, MyInput, MyTextarea} from \"../../Common/FormControls/FormControls\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {requiredField} from \"../../../Utils/Validation/validators\";\r\n\r\ntype ProfileDataFormTypes = {\r\n    handleSubmit: any;\r\n    error: string;\r\n    profile: profileType;\r\n}\r\n\r\nconst ProfileDataForm = (props: ProfileDataFormTypes) => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            <form onSubmit={props.handleSubmit} >\r\n                <div className={s.profileDataButton}>\r\n                    <button><strong> Save changes </strong></button>\r\n                    {props.error && <div className={s.formSummaryError}>\r\n                        {props.error}\r\n                    </div>\r\n                    }\r\n                </div>\r\n                <div className={s.formControlItem}>\r\n                    <p>Full name</p>\r\n                    <Field type={\"text\"} name={\"fullName\"} component={MyInput} placeholder={\"Full name\"}\r\n                           validate={[requiredField]}/>\r\n                </div>\r\n                <div>\r\n                    <p>Looking for a job</p>\r\n                    <Field type={\"checkbox\"} name={\"lookingForAJob\"} component={InputCheckbox}/>\r\n                </div>\r\n                <div>\r\n                    <p>My professional skills</p>\r\n                    <Field type={\"textarea\"} name={\"lookingForAJobDescription\"} component={MyTextarea}\r\n                           validate={[requiredField]}/>\r\n                </div>\r\n                <div>\r\n                    <p>About me</p>\r\n                    <Field type={\"textarea\"} name={\"aboutMe\"} component={MyTextarea}\r\n                           validate={[requiredField]}/>\r\n                </div>\r\n                <div>\r\n                    <p>Contacts</p>\r\n                    {Object.keys(props.profile.contacts).map(key => {\r\n                        return (\r\n                            <div>\r\n                                <strong> {key}: </strong> <Field type={\"text\"} name={\"contacts.\" + key}\r\n                                                                 component={MyInput}/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<any, any>({\r\n    form: 'profileData'\r\n})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {profileType} from \"../../../Redux/Types\";\r\nimport avatarLogo from \"../../../Assets/Images/avatar.jpg\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWtihHooks\";\r\nimport ProfileData from \"./ProfileData\";\r\nimport {ProfileDataReduxForm} from \"./ProfileDataForm\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\n\r\ntype propsType = {\r\n    profile: profileType,\r\n    status: string,\r\n    update: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (e: File) => void,\r\n    updateProfileData: (profile: profileType) => Promise<any>,\r\n}\r\n\r\nconst ProfileInfo: React.FC<propsType> = ({profile, status, update, isOwner, savePhoto, updateProfileData}) => {\r\n\r\n    const photoUploadHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (formData: profileType) => {\r\n        updateProfileData(formData).then(\r\n            () => setEditMode(false)\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {profile &&\r\n            <div>\r\n                <div className={s.profilePhotoAndData}>\r\n                    <div className={s.profilePhoto}>\r\n                        <img src={profile.photos.large || avatarLogo} alt=\"large avatar\"/>\r\n                        {isOwner && <Input type=\"file\" onChange={photoUploadHandler}/>}\r\n                        <ProfileStatusWithHooks profile={profile} status={status}\r\n                                                update={update} isOwner={isOwner}/>\r\n                    </div>\r\n\r\n                    {\r\n                        editMode\r\n                            ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit}\r\n                                                    profile={profile}/>\r\n                            : <ProfileData isOwner={isOwner}\r\n                                           profile={profile}\r\n                                           activateEditMode={() => setEditMode(true)}/>\r\n                    }\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import {photosType, postsDataType, postType, profilePageType, profileType} from \"./Types\";\r\nimport {postApi, profileApi, userApi} from \"../API/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst addPost = \"ADD-POST\";\r\nconst SET_USERS_PROFILE = \"SET_USERS_PROFILE\";\r\nconst SET_USER_STATUS = \"SET_USER_STATUS\";\r\nconst SET_USER_PHOTO = \"SET_USER_PHOTO\";\r\nconst SET_UPDATED_PROFILE_STATUS = \"SET_UPDATED_PROFILE_STATUS\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst SET_POSTS = \"SET_POSTS\";\r\n\r\n\r\nlet initialState = {\r\n    profile: null,\r\n    status: \"\",\r\n    postsData: [],\r\n}\r\n\r\nconst profileReducer = (state: profilePageType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_POSTS:\r\n            return {\r\n                ...state,\r\n                postsData: action.posts,\r\n            }\r\n        case SET_USERS_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_USER_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_USER_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        case SET_UPDATED_PROFILE_STATUS:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    fullName: action.profile.fullName,\r\n                    lookingForAJobDescription: action.profile.lookingForAJobDescription,\r\n                    lookingForAJob: action.profile.lookingForAJob,\r\n                    aboutMe: action.profile.aboutMe,\r\n                    contacts: {\r\n                        ...action.profile.contacts\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setPosts = (posts: postsDataType) => ({type: SET_POSTS, posts})\r\nconst setUsersProfile = (profile: profileType) => ({type: SET_USERS_PROFILE, profile})\r\nconst setUserStatus = (status: string) => ({type: SET_USER_STATUS, status})\r\nconst setUserPhoto = (photos: photosType) => ({type: SET_USER_PHOTO, photos})\r\nconst setUpdatedProfileData = (profile: profileType) => ({type: SET_UPDATED_PROFILE_STATUS, profile})\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        userApi.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUsersProfile(response.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        profileApi.getStatus(userId).then(response => {\r\n            dispatch(setUserStatus(response.data))\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => {\r\n    return (dispatch: any) => {\r\n        profileApi.updateStatus(status).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserStatus(status))\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File) => {\r\n    return (dispatch: any) => {\r\n        profileApi.savePhoto(file)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserPhoto(response.data.data.photos))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateProfileData = (profile: profileType) => async (dispatch: any) => {\r\n    const response = await profileApi.updateProfileData(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUpdatedProfileData(profile))\r\n    } else {\r\n        let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n        dispatch(stopSubmit(\"profileData\", {contacts: {[key]: response.data.messages[0]}}))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport const getPosts = () => async (dispatch: any) => {\r\n    const response = await postApi.getPosts()\r\n    if (response.status === 200) {\r\n        response.data = Object.keys(response.data).map(key => {\r\n            return [response.data[key], key]})\r\n        dispatch(setPosts(response.data))\r\n    }\r\n}\r\n\r\nexport const sendNewPost = (post: postType) => async (dispatch: any) => {\r\n    const response = await postApi.sendPost(post)\r\n    if (response.status === 200) {\r\n        dispatch(getPosts())\r\n    }\r\n}\r\n\r\nexport const deletePost = (serverID: string) => async (dispatch: any) => {\r\n    const response = await postApi.deletePost(serverID)\r\n    if (response.status === 200) {\r\n        dispatch(getPosts())\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype propsType = {\r\n    message: string,\r\n    likesCount: number,\r\n    deletePost: (postId: string) => void,\r\n    serverID: string,\r\n    avatar: string,\r\n};\r\n\r\nconst Post = React.memo((props: propsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={props.avatar ? props.avatar : \"https://greendestinations.org/wp-content/uploads/2019/05/avatar-exemple.jpg\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount}  likes</span>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => props.deletePost(props.serverID)}> Delete post </button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Post","import React from 'react';\r\nimport {Field, reduxForm, reset, SubmitHandler} from \"redux-form\";\r\nimport {MyTextarea} from \"../../Common/FormControls/FormControls\";\r\n\r\ntype propsType = {\r\n    handleSubmit: SubmitHandler;\r\n}\r\n\r\nconst AddPostForm = React.memo((props: propsType) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={MyTextarea} name={\"addNewPost\"}\r\n                           placeholder={\"Add your post here\"}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n        </form>\r\n    )\r\n})\r\n\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('AddPost'));\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm({\r\n    form: 'AddPost',\r\n    onSubmitSuccess: afterSubmit,\r\n})(AddPostForm)","import React, {useCallback} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {AddPostReduxForm} from \"./AddPostForm\";\r\nimport {postType} from \"../../../Redux/Types\";\r\n\r\ntype propsType = {\r\n    posts: [postType, string],\r\n    sendNewPost: (post: postType) => void,\r\n    deletePost: (serverID: string) => void,\r\n    avatar: string,\r\n    isOwner: boolean,\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: propsType) => {\r\n    let postElements;\r\n    const deletePost = useCallback((serverID: string) => {\r\n        props.deletePost(serverID)\r\n    }, [props])\r\n    if (props.posts !== null) {\r\n        if (props.isOwner) {\r\n            if (props.isOwner) {\r\n                postElements = props.posts.map((p: any) => {\r\n                    return <Post key={p[0].id}\r\n                                 message={p[0].message}\r\n                                 likesCount={p[0].likesCount}\r\n                                 serverID={p[1]}\r\n                                 deletePost={deletePost}\r\n                                 avatar={props.avatar}\r\n                    />\r\n                }).reverse()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const onSubmit = useCallback((values: any) => {\r\n        const post = {id: Math.random(), message: values.addNewPost, likesCount: 0}\r\n        props.sendNewPost(post)\r\n    }, [])\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <h3> My posts </h3>\r\n            <AddPostReduxForm onSubmit={onSubmit}/>\r\n            <div className={s.posts}>  {postElements}  </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {deletePost, getPosts, sendNewPost} from \"../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {_stateType} from \"../../../Redux/Types\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../../HOC/withAuthRedirect\";\r\n\r\n\r\nclass MyPostsContainer extends React.Component<any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getPosts()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MyPosts posts={this.props.posts}\r\n                         sendNewPost={this.props.sendNewPost}\r\n                         deletePost={this.props.deletePost}\r\n                         avatar={this.props.avatar}\r\n                         isOwner={!this.props.match.params.userId}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => {\r\n    return {\r\n        posts: state.profilePage.postsData,\r\n        avatar: state.profilePage.profile?.photos.small\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {sendNewPost, getPosts, deletePost}))(MyPostsContainer)","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../Redux/Types\";\r\n\r\ntype propsType = {\r\n    profile: profileType,\r\n    status: string,\r\n    update: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (e: File) => void,\r\n    updateProfileData: (profile: profileType) => Promise<any>,\r\n}\r\n\r\nfunction Profile(props: propsType) {\r\n\r\n    return (\r\n        <div >\r\n            <ProfileInfo profile={props.profile} status={props.status} update={props.update}\r\n                         isOwner={props.isOwner} savePhoto={props.savePhoto} updateProfileData={props.updateProfileData}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {_stateType, profileType} from \"../../Redux/Types\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    savePhoto,\r\n    updateProfileData,\r\n    updateUserStatus\r\n} from \"../../Redux/profileReducer\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<any> {\r\n\r\n    goToProfile () {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorisedId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.goToProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.goToProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className={s.content}>\r\n            <Profile profile={this.props.profile} status={this.props.status}\r\n                     update={this.props.updateUserStatus} isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto} updateProfileData={this.props.updateProfileData}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect (mapStateToProps,\r\n        {getUserProfile, getUserStatus, updateUserStatus, savePhoto, updateProfileData}),\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\n\r\nfunction Settings() {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import {usersPageType, usersType} from \"./Types\";\r\nimport {userApi} from \"../API/api\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_QUANTITY = \"SET_TOTAL_USERS_QUANTITY\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_FOLLOW_STATUS_CHANGING = \"TOGGLE_FOLLOW_STATUS_CHANGING\";\r\n\r\nlet initialState: usersPageType = {\r\n    users: [],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowStatusChanging: [],\r\n}\r\n\r\n\r\nconst usersReducer = (state: usersPageType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n\r\n        case SET_TOTAL_USERS_QUANTITY:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersQuantity,\r\n            }\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        case TOGGLE_FOLLOW_STATUS_CHANGING:\r\n            return {\r\n                ...state,\r\n                isFollowStatusChanging: action.isFollowStatusChanging\r\n                    ? [...state.isFollowStatusChanging, action.userId]\r\n                    : state.isFollowStatusChanging.filter(id => id !== action.userId),\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// Action creators\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId});\r\nexport const unFollowSuccess = (userId: number) => ({type: UNFOLLOW, userId});\r\nexport const setUsers = (users: usersType[]) => ({type: SET_USERS, users});\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setTotalUsersQuantity = (totalUsersQuantity: number) => ({\r\n    type: SET_TOTAL_USERS_QUANTITY,\r\n    totalUsersQuantity\r\n});\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nexport const toggleFollowStatusChanging = (isFollowStatusChanging: boolean, userId: number) =>\r\n    ({type: TOGGLE_FOLLOW_STATUS_CHANGING, isFollowStatusChanging, userId});\r\n\r\n\r\n// Thunk creators\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setUsers([]));\r\n        dispatch(setCurrentPage(currentPage));\r\n        userApi.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersQuantity(data.totalCount));\r\n        });\r\n    }\r\n}\r\nexport const unFollow = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch (toggleFollowStatusChanging(true, userId))\r\n        userApi.unFollow(userId).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch (unFollowSuccess(userId))\r\n            }\r\n            dispatch (toggleFollowStatusChanging(false, userId))\r\n        });\r\n    }\r\n}\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch (toggleFollowStatusChanging(true, userId))\r\n        userApi.follow(userId).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch (followSuccess(userId))\r\n            }\r\n            dispatch (toggleFollowStatusChanging(false, userId))\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\ntype paginatorPropsType = {\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPaginationClickHandler: (p: number) => void,\r\n}\r\n\r\nconst Paginator = (props: paginatorPropsType) => {\r\n    let pagesNumber = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesNumber; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionSize = 10;\r\n    let portionCount = Math.ceil(pagesNumber/portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n            <div className={s.pagination}>\r\n                {portionNumber > 1 &&\r\n                <button onClick={() => {setPortionNumber(portionNumber - 1)}}> Previous </button>}\r\n\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p, index) =>\r\n                    <span key={index} className={(props.currentPage === p) ? s.selectedPage : \"\"}\r\n                          style={{cursor: \"pointer\"}}\r\n                          onClick={() => {\r\n                              props.onPaginationClickHandler(p)\r\n                          }}> {p} </span>\r\n                )}\r\n                {portionCount > portionNumber &&\r\n                <button onClick={() => {setPortionNumber(portionNumber + 1)}}> Next </button>}\r\n            </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Paginator","import React from \"react\"\r\nimport s from \"./Users.module.css\"\r\nimport {usersType} from \"../../Redux/Types\";\r\nimport avatarLogo from \"../../Assets/Images/avatar.jpg\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../Common/Paginator/Paginator\";\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number;\r\n    pageSize: number;\r\n    currentPage: number;\r\n    users: Array<usersType>;\r\n    unFollow: (id: number) => void;\r\n    follow: (id: number) => void;\r\n    onPaginationClickHandler: (p: number) => void;\r\n    isFollowStatusChanging: Array<number>;\r\n    toggleIsFollowStatusChanging: (isFollowStatusChanging: boolean, userId: number) => void\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator totalUsersCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                       currentPage={props.currentPage} onPaginationClickHandler={props.onPaginationClickHandler}/>\r\n            {\r\n                props.users.map((u: usersType) =>\r\n                    <div key={u.id} className={s.userContainer}>\r\n                        <div className={s.imageAndButtonContainer}>\r\n                            <div>\r\n                                <NavLink to={\"/profile/\" + u.id}>\r\n                                    <img src={u.photos.small ? u.photos.small : avatarLogo} className={s.usersPhoto}/>\r\n                                </NavLink>\r\n                            </div>\r\n                            <div className={s.button}>\r\n                                {u.followed\r\n                                    ? <button disabled={props.isFollowStatusChanging.some(id => id === u.id)} onClick={() => props.unFollow(u.id)}>UnFollow</button>\r\n                                    : <button disabled={props.isFollowStatusChanging.some(id => id === u.id)} onClick={() => props.follow(u.id)}>Follow</button>}\r\n                            </div>\r\n                        </div>\r\n                        <span className={s.userInformation}>\r\n                            <span>\r\n                                <div>{u.name}</div>\r\n                                <div>{u.status}</div>\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import {_stateType} from \"./Types\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersPrimitiveSelector = (state: _stateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsersPrimitiveSelector, (users) => {return users.filter(u => true)})\r\n\r\n\r\nexport const getPageSizeSelector = (state: _stateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCountSelector = (state: _stateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPageSelector = (state: _stateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetchingSelector = (state: _stateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getIsFollowStatusChangingSelector = (state: _stateType) => {\r\n    return state.usersPage.isFollowStatusChanging\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    toggleFollowStatusChanging,\r\n    unFollow,\r\n} from \"../../Redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPageSelector, getIsFetchingSelector, getIsFollowStatusChangingSelector,\r\n    getPageSizeSelector,\r\n    getTotalUsersCountSelector,\r\n    getUsersSelector\r\n} from \"../../Redux/user-selector\";\r\n\r\n\r\nclass UsersContainer extends React.Component<any> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPaginationClickHandler = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n                   isFollowStatusChanging = {this.props.isFollowStatusChanging}\r\n                   toggleIsFollowStatusChanging = {this.props.toggleIsFollowStatusChanging}\r\n                   onPaginationClickHandler={this.onPaginationClickHandler}\r\n                   users={this.props.users}/>\r\n        </>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        totalUsersCount: getTotalUsersCountSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching: getIsFetchingSelector(state),\r\n        isFollowStatusChanging: getIsFollowStatusChangingSelector(state),\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect (mapStateToProps, {follow,\r\n        toggleFollowStatusChanging, getUsers, unFollow})\r\n)(UsersContainer)\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {MyInput} from \"../Common/FormControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../../Utils/Validation/validators\";\r\nimport s from \"../Common/FormControls/FormControls.module.css\"\r\n\r\ntype loginFormType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst maxLength10 = maxLength(10);\r\nconst maxLength50 = maxLength(50);\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<any, loginFormType> & loginFormType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field type={\"text\"} name={\"email\"} component={MyInput} placeholder={\"email\"}\r\n                       validate={[requiredField, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"password\"} name={\"password\"} component={MyInput} placeholder={\"password\"}\r\n                       validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div style={{display: \"inline-flex\"}}>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={MyInput}/> <span>remember me</span>\r\n            </div>\r\n            {\r\n                captchaUrl &&\r\n                <div> <img src={captchaUrl} alt=\"Captcha\"/> </div>\r\n            }\r\n            {\r\n                captchaUrl &&\r\n                <div>\r\n                    <Field type={\"text\"} name={\"captcha\"} component={MyInput}\r\n                           placeholder={\"Type antibot symbols\"}\r\n                           validate={[requiredField]}/>\r\n                </div>\r\n            }\r\n            {\r\n                error &&\r\n            <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Sign in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<any, any>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)","import React from \"react\";\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptcha, login, logout} from \"../../Redux/authReducer\";\r\nimport {_stateType} from \"../../Redux/Types\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype loginType = {\r\n    login: (email: string, password: string|number, rememberMe: boolean, captcha: string) => void,\r\n    isAuth: boolean,\r\n    captchaUrl: string,\r\n}\r\n\r\nconst Login = (props: loginType) => {\r\n    const onSubmit = (formData: { email: string, password: string|number, rememberMe: boolean, captcha: string}) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: _stateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\n// @ts-ignore\r\nexport default connect(mapStateToProps, {login, logout, getCaptcha})(Login)","import React from \"react\";\r\nimport s from './App.module.css';\r\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\r\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport Music from \"./Components/Music/Music\";\r\nimport News from \"./Components/News/News\";\r\nimport Settings from \"./Components/Settings/Settings\";\r\nimport UsersContainer from \"./Components/Users/UsersContainer\";\r\nimport Login from \"./Components/Login/Login\";\r\nconst DialogsContainer = React.lazy(() => import(\"./Components/Dialogs/DialogsContainer\"))\r\n\r\n\r\ntype MainBlockTypes = {\r\n\r\n}\r\n\r\nconst MainBlock = (props: MainBlockTypes) => {\r\n\r\n    return (\r\n\r\n        <div className={s.appWrapperContent}>\r\n            <Switch>\r\n                <Route exact path='/'\r\n                       render={() => <Redirect to={\"/profile\"}/>}/>\r\n                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                <Route path='/dialogs' render={() => {\r\n                    return <React.Suspense fallback={<Preloader/>}>\r\n                        <DialogsContainer/>\r\n                    </React.Suspense>\r\n                }}/>\r\n                <Route path='/music' render={() => <Music/>}/>\r\n                <Route path='/news' render={() => <News/>}/>\r\n                <Route path='/settings' render={() => <Settings/>}/>\r\n                <Route path='/users' render={() => <UsersContainer/>}/>\r\n                <Route path='/login' render={() => <Login/>}/>\r\n                <Route path='*' render={() => <div> 404 NOT FOUND</div> }/>\r\n            </Switch>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default MainBlock","import React from 'react';\nimport s from './App.module.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport {_stateType} from './Redux/Types';\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport {connect} from \"react-redux\";\nimport {initialiseApp} from \"./Redux/appReducer\";\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\nimport FriendsContainer from \"./Components/Friends/FriendsContainer\";\nimport MainBlock from \"./MainBlock\";\n\n\nclass App extends React.Component<any, any> {\n    componentDidMount() {\n        this.props.initialiseApp()\n    }\n\n    render() {\n        if (!this.props.initialised) {\n            return <Preloader/>\n        }\n        return (\n            <div className={s.appWrapper}>\n                <HeaderContainer/>\n                <Navbar/>\n                <MainBlock/>\n                <FriendsContainer/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: _stateType) => ({\n    initialised: state.app.initialised\n})\n\nexport default connect(mapStateToProps, {initialiseApp})(App);","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport messageReducer from \"./messageReducer\";\r\nimport friendsReducer from \"./friendsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { reducer as formReducer } from \"redux-form\"\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messageReducer,\r\n    usersPage: usersReducer,\r\n    friendsPage: friendsReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nlet store: Store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./Redux/reduxStore\";\nimport {Provider} from 'react-redux';\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__ZYcM1\",\"error\":\"FormControls_error__3I2i7\",\"formSummaryError\":\"FormControls_formSummaryError__2CIQE\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.64830c49.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__2cLG_\",\"userContainer\":\"Users_userContainer__PLg5V\",\"imageAndButtonContainer\":\"Users_imageAndButtonContainer__3Yr9E\",\"button\":\"Users_button__2GMTj\",\"userInformation\":\"Users_userInformation__3W_DY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__l2oe9\",\"loggedInUser\":\"Header_loggedInUser__orrFW\",\"loggedInUserName\":\"Header_loggedInUserName__2_Vc_\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {_stateType} from \"../Redux/Types\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state: _stateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if(!this.props.isAuth) {return <Redirect to={\"/login\"}/>};\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1S85F\",\"appWrapperContent\":\"App_appWrapperContent__3g9po\"};"],"sourceRoot":""}